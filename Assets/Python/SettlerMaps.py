from Core import *
from Files import *
from Events import handler


def applyMap(iCivilization, iPeriod=-1):
	for (x, y), iValue in FileMap.read("Settler/%s.csv" % civ_name(iCivilization)):
		if iValue and not plot(x, y).isWater():
			plot(x, y).setSettlerValue(iCivilization, iValue)
		
def init():
	for iCivilization in lBirthOrder:
		applyMap(iCivilization)


# TODO: we updated this on civ change, is it really still necessary?
@handler("playerCivAssigned")
def activate(iPlayer, iCivilization):
	if iCivilization in lBirthOrder:
		applyMap(iCivilization)

@handler("periodChange")
def updateMapOnPeriodChange(iCivilization, iPeriod):
	applyMap(iCivilization, iPeriod)


dPeriodSettlerMaps = {
iPeriodMing : 
[((89, 37),
(( 3, 20, 20, 20, 20, 20, 20, 20, 20,  3,  3,  3,  3,  3, 40,400,400,400,400, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,400,400,400,400,400,400,400, 60),
( 20, 20, 20,300,300,300,300,300,300,300,400,400,400,400,400,400,400,400,400, 60),
( 20,300,300,300,300,300,300,300,300,400,400,500,500,500,500, 20, 20,400, 20, 60),
(300,300,300,300,300, 20, 20, 20, 20, 20,400, 20,500,500,500,500, 20, 20, 20, 20),
( 20,300,300, 20, 20, 20,300,300,300, 20, 20,500,200,500,500,500,500,500, 20, 20),
( 20, 20, 20, 20,300,300,300,300,300,500, 20,500,200,500,500,500,500,500, 20, 20),
( 20, 20, 20,300,300,300,300,300,300, 20,500,500,500,500,500,500,500,500,500, 20),
( 20, 20, 20, 20, 20,300,300,300, 20,500, 20,200,500,500,500,500,500,500,500, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,400, 20,500,500,500,500,500,500,500, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,400, 20,400, 20,400,400,400,400, 20, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 60, 60, 60,400,400,400, 20, 20,400),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 60, 60, 60, 60, 20, 20, 20, 20,400),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 60, 60, 20, 20, 20, 20, 20, 20, 20)))],

iPeriodAustria :
[((56, 48), 
((20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3, 20),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3,  3, 20,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3, 20,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3, 20,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 20, 20, 20, 20, 20, 20, 20, 20, 60, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20, 90, 90,400,400,400,200,200,400, 60, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20,400,500,800,400,400,400,400,300, 20, 20, 60, 60,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3),
( 20,300,500,500,700,400,800,800,400,300, 90, 20, 60, 60, 20,  3, 20,  3,  3,  3,  3,  3, 20, 20),
( 20,300, 20, 20, 20, 20,400,400,300,400, 20, 20, 90, 20, 20, 20,  3, 20,  3,  3,  3,  3, 20,  3))),
((30, 30),
((60, 60),
( 60, 60)))]
}